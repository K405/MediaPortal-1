//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TuningDetail))]
    public partial class LnbType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
      #region Primitive Properties

      private int _highBandFrequency;
      private int _idLnbType;
      private bool _isBandStacked;
      private bool _isToroidal;
      private int _lowBandFrequency;

      private string _name;
      private int _switchFrequency;

      [DataMember]
      public int IdLnbType
      {
        get { return _idLnbType; }
        set
        {
          if (_idLnbType != value)
          {
            if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
            {
              throw new InvalidOperationException("The property 'IdLnbType' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
            }
            _idLnbType = value;
            OnPropertyChanged("IdLnbType");
          }
        }
      }

      [DataMember]
      public string Name
      {
        get { return _name; }
        set
        {
          if (_name != value)
          {
            _name = value;
            OnPropertyChanged("Name");
          }
        }
      }

      [DataMember]
      public int LowBandFrequency
      {
        get { return _lowBandFrequency; }
        set
        {
          if (_lowBandFrequency != value)
          {
            _lowBandFrequency = value;
            OnPropertyChanged("LowBandFrequency");
          }
        }
      }

      [DataMember]
      public int HighBandFrequency
      {
        get { return _highBandFrequency; }
        set
        {
          if (_highBandFrequency != value)
          {
            _highBandFrequency = value;
            OnPropertyChanged("HighBandFrequency");
          }
        }
      }

      [DataMember]
      public int SwitchFrequency
      {
        get { return _switchFrequency; }
        set
        {
          if (_switchFrequency != value)
          {
            _switchFrequency = value;
            OnPropertyChanged("SwitchFrequency");
          }
        }
      }

      [DataMember]
      public bool IsBandStacked
      {
        get { return _isBandStacked; }
        set
        {
          if (_isBandStacked != value)
          {
            _isBandStacked = value;
            OnPropertyChanged("IsBandStacked");
          }
        }
      }

      [DataMember]
      public bool IsToroidal
      {
        get { return _isToroidal; }
        set
        {
          if (_isToroidal != value)
          {
            _isToroidal = value;
            OnPropertyChanged("IsToroidal");
          }
        }
      }

      #endregion

      #region Navigation Properties

      private TrackableCollection<TuningDetail> _tuningDetails;

      [DataMember]
      public TrackableCollection<TuningDetail> TuningDetails
      {
        get
        {
          if (_tuningDetails == null)
          {
            _tuningDetails = new TrackableCollection<TuningDetail>();
            _tuningDetails.CollectionChanged += FixupTuningDetails;
          }
          return _tuningDetails;
        }
        set
        {
          if (!ReferenceEquals(_tuningDetails, value))
          {
            if (ChangeTracker.ChangeTrackingEnabled)
            {
              throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
            }
            if (_tuningDetails != null)
            {
              _tuningDetails.CollectionChanged -= FixupTuningDetails;
            }
            _tuningDetails = value;
            if (_tuningDetails != null)
            {
              _tuningDetails.CollectionChanged += FixupTuningDetails;
            }
            OnNavigationPropertyChanged("TuningDetails");
          }
        }
      }

      #endregion

      #region ChangeTracking

      private ObjectChangeTracker _changeTracker;
      protected bool IsDeserializing { get; private set; }

      #region INotifyPropertyChanged Members

      event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }

      #endregion

      #region IObjectWithChangeTracker Members

      [DataMember]
      public ObjectChangeTracker ChangeTracker
      {
        get
        {
          if (_changeTracker == null)
          {
            _changeTracker = new ObjectChangeTracker();
            _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
          }
          return _changeTracker;
        }
        set
        {
          if(_changeTracker != null)
          {
            _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
          }
          _changeTracker = value;
          if(_changeTracker != null)
          {
            _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
          }
        }
      }

      #endregion

      protected virtual void OnPropertyChanged(String propertyName)
      {
        if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
        {
          ChangeTracker.State = ObjectState.Modified;
        }
        if (_propertyChanged != null)
        {
          _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
      }
    
      protected virtual void OnNavigationPropertyChanged(String propertyName)
      {
        if (_propertyChanged != null)
        {
          _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
      }

      private event PropertyChangedEventHandler _propertyChanged;

      private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
      {
        if (e.NewState == ObjectState.Deleted)
        {
          ClearNavigationProperties();
        }
      }

      [OnDeserializing]
      public void OnDeserializingMethod(StreamingContext context)
      {
        IsDeserializing = true;
      }
    
      [OnDeserialized]
      public void OnDeserializedMethod(StreamingContext context)
      {
        IsDeserializing = false;
        ChangeTracker.ChangeTrackingEnabled = true;
      }
    
      protected virtual void ClearNavigationProperties()
      {
        TuningDetails.Clear();
      }

      #endregion

      #region Association Fixup
    
      private void FixupTuningDetails(object sender, NotifyCollectionChangedEventArgs e)
      {
        if (IsDeserializing)
        {
          return;
        }
    
        if (e.NewItems != null)
        {
          foreach (TuningDetail item in e.NewItems)
          {
            item.LnbType = this;
            if (ChangeTracker.ChangeTrackingEnabled)
            {
              if (!item.ChangeTracker.ChangeTrackingEnabled)
              {
                item.StartTracking();
              }
              ChangeTracker.RecordAdditionToCollectionProperties("TuningDetails", item);
            }
          }
        }
    
        if (e.OldItems != null)
        {
          foreach (TuningDetail item in e.OldItems)
          {
            if (ReferenceEquals(item.LnbType, this))
            {
              item.LnbType = null;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
              ChangeTracker.RecordRemovalFromCollectionProperties("TuningDetails", item);
            }
          }
        }
      }

      #endregion
    }
}
