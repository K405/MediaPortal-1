//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Card))]
    [KnownType(typeof(Channel))]
    [KnownType(typeof(Schedule))]
    public partial class Conflict: IObjectWithChangeTracker, INotifyPropertyChanged
    {
      #region Primitive Properties

      private DateTime _conflictDate;
      private Nullable<int> _idCard;
      private int _idChannel;
      private int _idConflict;
      private int _idConflictingSchedule;

      private int _idSchedule;

      [DataMember]
      public int IdConflict
      {
        get { return _idConflict; }
        set
        {
          if (_idConflict != value)
          {
            if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
            {
              throw new InvalidOperationException("The property 'IdConflict' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
            }
            _idConflict = value;
            OnPropertyChanged("IdConflict");
          }
        }
      }

      [DataMember]
      public int IdSchedule
      {
        get { return _idSchedule; }
        set
        {
          if (_idSchedule != value)
          {
            ChangeTracker.RecordOriginalValue("IdSchedule", _idSchedule);
            if (!IsDeserializing)
            {
              if (Schedule != null && Schedule.IdSchedule != value)
              {
                Schedule = null;
              }
            }
            _idSchedule = value;
            OnPropertyChanged("IdSchedule");
          }
        }
      }

      [DataMember]
      public int IdConflictingSchedule
      {
        get { return _idConflictingSchedule; }
        set
        {
          if (_idConflictingSchedule != value)
          {
            ChangeTracker.RecordOriginalValue("IdConflictingSchedule", _idConflictingSchedule);
            if (!IsDeserializing)
            {
              if (ConflictingSchedule != null && ConflictingSchedule.IdSchedule != value)
              {
                ConflictingSchedule = null;
              }
            }
            _idConflictingSchedule = value;
            OnPropertyChanged("IdConflictingSchedule");
          }
        }
      }

      [DataMember]
      public int IdChannel
      {
        get { return _idChannel; }
        set
        {
          if (_idChannel != value)
          {
            ChangeTracker.RecordOriginalValue("IdChannel", _idChannel);
            if (!IsDeserializing)
            {
              if (Channel != null && Channel.IdChannel != value)
              {
                Channel = null;
              }
            }
            _idChannel = value;
            OnPropertyChanged("IdChannel");
          }
        }
      }

      [DataMember]
      public DateTime ConflictDate
      {
        get { return _conflictDate; }
        set
        {
          if (_conflictDate != value)
          {
            _conflictDate = value;
            OnPropertyChanged("ConflictDate");
          }
        }
      }

      [DataMember]
      public Nullable<int> IdCard
      {
        get { return _idCard; }
        set
        {
          if (_idCard != value)
          {
            ChangeTracker.RecordOriginalValue("IdCard", _idCard);
            if (!IsDeserializing)
            {
              if (Card != null && Card.IdCard != value)
              {
                Card = null;
              }
            }
            _idCard = value;
            OnPropertyChanged("IdCard");
          }
        }
      }

      #endregion

      #region Navigation Properties

      private Card _card;

      private Channel _channel;
      private Schedule _conflictingSchedule;

      private Schedule _schedule;

      [DataMember]
      public Card Card
      {
        get { return _card; }
        set
        {
          if (!ReferenceEquals(_card, value))
          {
            var previousValue = _card;
            _card = value;
            FixupCard(previousValue);
            OnNavigationPropertyChanged("Card");
          }
        }
      }

      [DataMember]
      public Channel Channel
      {
        get { return _channel; }
        set
        {
          if (!ReferenceEquals(_channel, value))
          {
            var previousValue = _channel;
            _channel = value;
            FixupChannel(previousValue);
            OnNavigationPropertyChanged("Channel");
          }
        }
      }

      [DataMember]
      public Schedule Schedule
      {
        get { return _schedule; }
        set
        {
          if (!ReferenceEquals(_schedule, value))
          {
            var previousValue = _schedule;
            _schedule = value;
            FixupSchedule(previousValue);
            OnNavigationPropertyChanged("Schedule");
          }
        }
      }

      [DataMember]
      public Schedule ConflictingSchedule
      {
        get { return _conflictingSchedule; }
        set
        {
          if (!ReferenceEquals(_conflictingSchedule, value))
          {
            var previousValue = _conflictingSchedule;
            _conflictingSchedule = value;
            FixupConflictingSchedule(previousValue);
            OnNavigationPropertyChanged("ConflictingSchedule");
          }
        }
      }

      #endregion

      #region ChangeTracking

      private ObjectChangeTracker _changeTracker;
      protected bool IsDeserializing { get; private set; }

      #region INotifyPropertyChanged Members

      event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }

      #endregion

      #region IObjectWithChangeTracker Members

      [DataMember]
      public ObjectChangeTracker ChangeTracker
      {
        get
        {
          if (_changeTracker == null)
          {
            _changeTracker = new ObjectChangeTracker();
            _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
          }
          return _changeTracker;
        }
        set
        {
          if(_changeTracker != null)
          {
            _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
          }
          _changeTracker = value;
          if(_changeTracker != null)
          {
            _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
          }
        }
      }

      #endregion

      protected virtual void OnPropertyChanged(String propertyName)
      {
        if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
        {
          ChangeTracker.State = ObjectState.Modified;
        }
        if (_propertyChanged != null)
        {
          _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
      }
    
      protected virtual void OnNavigationPropertyChanged(String propertyName)
      {
        if (_propertyChanged != null)
        {
          _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
      }

      private event PropertyChangedEventHandler _propertyChanged;

      private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
      {
        if (e.NewState == ObjectState.Deleted)
        {
          ClearNavigationProperties();
        }
      }
    
      // This entity type is the dependent end in at least one association that performs cascade deletes.
      // This event handler will process notifications that occur when the principal end is deleted.
      internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
      {
        if (e.NewState == ObjectState.Deleted)
        {
          this.MarkAsDeleted();
        }
      }

      [OnDeserializing]
      public void OnDeserializingMethod(StreamingContext context)
      {
        IsDeserializing = true;
      }
    
      [OnDeserialized]
      public void OnDeserializedMethod(StreamingContext context)
      {
        IsDeserializing = false;
        ChangeTracker.ChangeTrackingEnabled = true;
      }
    
      protected virtual void ClearNavigationProperties()
      {
        Card = null;
        Channel = null;
        Schedule = null;
        ConflictingSchedule = null;
      }

      #endregion

      #region Association Fixup
    
      private void FixupCard(Card previousValue, bool skipKeys = false)
      {
        if (IsDeserializing)
        {
          return;
        }
    
        if (previousValue != null && previousValue.Conflicts.Contains(this))
        {
          previousValue.Conflicts.Remove(this);
        }
    
        if (Card != null)
        {
          if (!Card.Conflicts.Contains(this))
          {
            Card.Conflicts.Add(this);
          }
    
          IdCard = Card.IdCard;
        }
        else if (!skipKeys)
        {
          IdCard = null;
        }
    
        if (ChangeTracker.ChangeTrackingEnabled)
        {
          if (ChangeTracker.OriginalValues.ContainsKey("Card")
              && (ChangeTracker.OriginalValues["Card"] == Card))
          {
            ChangeTracker.OriginalValues.Remove("Card");
          }
          else
          {
            ChangeTracker.RecordOriginalValue("Card", previousValue);
          }
          if (Card != null && !Card.ChangeTracker.ChangeTrackingEnabled)
          {
            Card.StartTracking();
          }
        }
      }
    
      private void FixupChannel(Channel previousValue)
      {
        if (IsDeserializing)
        {
          return;
        }
    
        if (previousValue != null && previousValue.Conflicts.Contains(this))
        {
          previousValue.Conflicts.Remove(this);
        }
    
        if (Channel != null)
        {
          if (!Channel.Conflicts.Contains(this))
          {
            Channel.Conflicts.Add(this);
          }
    
          IdChannel = Channel.IdChannel;
        }
        if (ChangeTracker.ChangeTrackingEnabled)
        {
          if (ChangeTracker.OriginalValues.ContainsKey("Channel")
              && (ChangeTracker.OriginalValues["Channel"] == Channel))
          {
            ChangeTracker.OriginalValues.Remove("Channel");
          }
          else
          {
            ChangeTracker.RecordOriginalValue("Channel", previousValue);
          }
          if (Channel != null && !Channel.ChangeTracker.ChangeTrackingEnabled)
          {
            Channel.StartTracking();
          }
        }
      }
    
      private void FixupSchedule(Schedule previousValue)
      {
        if (IsDeserializing)
        {
          return;
        }
    
        if (previousValue != null && previousValue.Conflicts.Contains(this))
        {
          previousValue.Conflicts.Remove(this);
        }
    
        if (Schedule != null)
        {
          if (!Schedule.Conflicts.Contains(this))
          {
            Schedule.Conflicts.Add(this);
          }
    
          IdSchedule = Schedule.IdSchedule;
        }
        if (ChangeTracker.ChangeTrackingEnabled)
        {
          if (ChangeTracker.OriginalValues.ContainsKey("Schedule")
              && (ChangeTracker.OriginalValues["Schedule"] == Schedule))
          {
            ChangeTracker.OriginalValues.Remove("Schedule");
          }
          else
          {
            ChangeTracker.RecordOriginalValue("Schedule", previousValue);
          }
          if (Schedule != null && !Schedule.ChangeTracker.ChangeTrackingEnabled)
          {
            Schedule.StartTracking();
          }
        }
      }
    
      private void FixupConflictingSchedule(Schedule previousValue)
      {
        if (IsDeserializing)
        {
          return;
        }
    
        if (previousValue != null && previousValue.ConflictingSchedules.Contains(this))
        {
          previousValue.ConflictingSchedules.Remove(this);
        }
    
        if (ConflictingSchedule != null)
        {
          if (!ConflictingSchedule.ConflictingSchedules.Contains(this))
          {
            ConflictingSchedule.ConflictingSchedules.Add(this);
          }
    
          IdConflictingSchedule = ConflictingSchedule.IdSchedule;
        }
        if (ChangeTracker.ChangeTrackingEnabled)
        {
          if (ChangeTracker.OriginalValues.ContainsKey("ConflictingSchedule")
              && (ChangeTracker.OriginalValues["ConflictingSchedule"] == ConflictingSchedule))
          {
            ChangeTracker.OriginalValues.Remove("ConflictingSchedule");
          }
          else
          {
            ChangeTracker.RecordOriginalValue("ConflictingSchedule", previousValue);
          }
          if (ConflictingSchedule != null && !ConflictingSchedule.ChangeTracker.ChangeTrackingEnabled)
          {
            ConflictingSchedule.StartTracking();
          }
        }
      }

      #endregion
    }
}
