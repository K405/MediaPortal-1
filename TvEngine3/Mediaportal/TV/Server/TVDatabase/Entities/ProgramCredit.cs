//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Program))]
    public partial class ProgramCredit: IObjectWithChangeTracker, INotifyPropertyChanged
    {
      #region Primitive Properties

      private int _idProgram;
      private int _idProgramCredit;
      private string _person;
      private string _role;

      [DataMember]
      public int IdProgramCredit
      {
        get { return _idProgramCredit; }
        set
        {
          if (_idProgramCredit != value)
          {
            if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
            {
              throw new InvalidOperationException("The property 'IdProgramCredit' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
            }
            _idProgramCredit = value;
            OnPropertyChanged("IdProgramCredit");
          }
        }
      }

      [DataMember]
      public int IdProgram
      {
        get { return _idProgram; }
        set
        {
          if (_idProgram != value)
          {
            ChangeTracker.RecordOriginalValue("IdProgram", _idProgram);
            if (!IsDeserializing)
            {
              if (Program != null && Program.IdProgram != value)
              {
                Program = null;
              }
            }
            _idProgram = value;
            OnPropertyChanged("IdProgram");
          }
        }
      }

      [DataMember]
      public string Person
      {
        get { return _person; }
        set
        {
          if (_person != value)
          {
            _person = value;
            OnPropertyChanged("Person");
          }
        }
      }

      [DataMember]
      public string Role
      {
        get { return _role; }
        set
        {
          if (_role != value)
          {
            _role = value;
            OnPropertyChanged("Role");
          }
        }
      }

      #endregion

      #region Navigation Properties

      private Program _program;

      [DataMember]
      public Program Program
      {
        get { return _program; }
        set
        {
          if (!ReferenceEquals(_program, value))
          {
            var previousValue = _program;
            _program = value;
            FixupProgram(previousValue);
            OnNavigationPropertyChanged("Program");
          }
        }
      }

      #endregion

      #region ChangeTracking

      private ObjectChangeTracker _changeTracker;
      protected bool IsDeserializing { get; private set; }

      #region INotifyPropertyChanged Members

      event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }

      #endregion

      #region IObjectWithChangeTracker Members

      [DataMember]
      public ObjectChangeTracker ChangeTracker
      {
        get
        {
          if (_changeTracker == null)
          {
            _changeTracker = new ObjectChangeTracker();
            _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
          }
          return _changeTracker;
        }
        set
        {
          if(_changeTracker != null)
          {
            _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
          }
          _changeTracker = value;
          if(_changeTracker != null)
          {
            _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
          }
        }
      }

      #endregion

      protected virtual void OnPropertyChanged(String propertyName)
      {
        if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
        {
          ChangeTracker.State = ObjectState.Modified;
        }
        if (_propertyChanged != null)
        {
          _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
      }
    
      protected virtual void OnNavigationPropertyChanged(String propertyName)
      {
        if (_propertyChanged != null)
        {
          _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
      }

      private event PropertyChangedEventHandler _propertyChanged;

      private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
      {
        if (e.NewState == ObjectState.Deleted)
        {
          ClearNavigationProperties();
        }
      }
    
      // This entity type is the dependent end in at least one association that performs cascade deletes.
      // This event handler will process notifications that occur when the principal end is deleted.
      internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
      {
        if (e.NewState == ObjectState.Deleted)
        {
          this.MarkAsDeleted();
        }
      }

      [OnDeserializing]
      public void OnDeserializingMethod(StreamingContext context)
      {
        IsDeserializing = true;
      }
    
      [OnDeserialized]
      public void OnDeserializedMethod(StreamingContext context)
      {
        IsDeserializing = false;
        ChangeTracker.ChangeTrackingEnabled = true;
      }
    
      protected virtual void ClearNavigationProperties()
      {
        Program = null;
      }

      #endregion

      #region Association Fixup
    
      private void FixupProgram(Program previousValue)
      {
        if (IsDeserializing)
        {
          return;
        }
    
        if (previousValue != null && previousValue.ProgramCredits.Contains(this))
        {
          previousValue.ProgramCredits.Remove(this);
        }
    
        if (Program != null)
        {
          if (!Program.ProgramCredits.Contains(this))
          {
            Program.ProgramCredits.Add(this);
          }
    
          IdProgram = Program.IdProgram;
        }
        if (ChangeTracker.ChangeTrackingEnabled)
        {
          if (ChangeTracker.OriginalValues.ContainsKey("Program")
              && (ChangeTracker.OriginalValues["Program"] == Program))
          {
            ChangeTracker.OriginalValues.Remove("Program");
          }
          else
          {
            ChangeTracker.RecordOriginalValue("Program", previousValue);
          }
          if (Program != null && !Program.ChangeTracker.ChangeTrackingEnabled)
          {
            Program.StartTracking();
          }
        }
      }

      #endregion
    }
}
